{"ast":null,"code":"import _classCallCheck from \"/Users/patrickneff/Documents/code/Pad-holder-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/patrickneff/Documents/code/Pad-holder-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/patrickneff/Documents/code/Pad-holder-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/patrickneff/Documents/code/Pad-holder-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/patrickneff/Documents/code/Pad-holder-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/patrickneff/Documents/code/Pad-holder-app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/patrickneff/Documents/code/Pad-holder-app/client/src/components/Work/work.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./work.css\";\nimport API from \"../utils/API\";\n\nvar Work =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Work, _Component);\n\n  function Work() {\n    var _this;\n\n    _classCallCheck(this, Work);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Work).call(this));\n\n    _this.string_to_array = function (str) {\n      return str.trim().split(\", \");\n    };\n\n    _this.state = {\n      seconds: '00',\n      roundMinutes: '3',\n      breakMinutes: '1',\n      round: '1',\n      work: true,\n      combo: '',\n      strikes: -1 // method that triggers the countdown functionality\n\n    };\n    _this.startCountDown = _this.startCountDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.breakTick = _this.breakTick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.roundTick = _this.roundTick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.round = _this.round.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.break = _this.break.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.display = _this.display.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getCombo = _this.getCombo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Starts timer\n\n\n  _createClass(Work, [{\n    key: \"startCountDown\",\n    value: function startCountDown() {\n      this.round();\n      this.roundNumber = 1;\n    } // Starts Round\n\n  }, {\n    key: \"round\",\n    value: function round() {\n      this.intervalHandle = setInterval(this.roundTick, 1000);\n      var time = this.state.roundMinutes;\n      this.secondNumber = time * 60;\n      this.callCombos();\n    } // Makes minutes and seconds go down\n\n  }, {\n    key: \"roundTick\",\n    value: function roundTick() {\n      var min = Math.floor(this.secondNumber / 60);\n      var sec = this.secondNumber - min * 60;\n      var round = this.roundNumber;\n      this.setState({\n        roundMinutes: min,\n        seconds: sec,\n        round: round,\n        work: true\n      });\n\n      if (sec < 10) {\n        this.setState({\n          seconds: \"0\" + this.state.seconds\n        });\n      }\n\n      if (min < 10) {\n        this.setState({\n          value: \"0\" + min\n        });\n      }\n\n      if (min === 0 & sec === 0) {\n        clearInterval(this.intervalHandle);\n        this.toggle();\n        this.setState({\n          roundMinutes: '3'\n        });\n      }\n\n      this.secondNumber--;\n    } // Break functions\n\n  }, {\n    key: \"break\",\n    value: function _break() {\n      this.intervalHandle = setInterval(this.breakTick, 1000);\n      var time = this.state.breakMinutes;\n      this.secondNumber = time * 60; // stop\n    }\n  }, {\n    key: \"breakTick\",\n    value: function breakTick() {\n      var min = Math.floor(this.secondNumber / 60);\n      var sec = this.secondNumber - min * 60;\n      var round = this.roundNumber;\n      this.setState({\n        breakMinutes: min,\n        seconds: sec,\n        round: round,\n        work: false\n      });\n\n      if (sec < 10) {\n        this.setState({\n          seconds: \"0\" + this.state.seconds\n        });\n      }\n\n      if (min < 10) {\n        this.setState({\n          value: \"0\" + min\n        });\n      }\n\n      if (min === 0 & sec === 0) {\n        clearInterval(this.intervalHandle);\n        this.roundNumber++;\n        this.round();\n        this.setState({\n          breakMinutes: '1'\n        });\n      }\n\n      this.secondNumber--;\n    } // Displays Round or Break\n\n  }, {\n    key: \"display\",\n    value: function display() {\n      if (this.state.work === true) {\n        return \"Round \".concat(this.state.round, \" of 5\");\n      } else {\n        return 'Break';\n      }\n    } // Decides Round or break for minutes\n\n  }, {\n    key: \"clockMinutes\",\n    value: function clockMinutes() {\n      if (this.state.work === true) {\n        return this.state.roundMinutes;\n      } else {\n        return this.state.breakMinutes;\n      }\n    } // End session after last round or go to break in between rounds\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.roundNumber === 5) {\n        this.endSession();\n      } else {\n        this.break();\n      }\n    } // End session\n\n  }, {\n    key: \"endSession\",\n    value: function endSession() {\n      console.log(\"end session\");\n      clearInterval(this.intervalHandle);\n      window.location.href = \"/Stats\";\n    } // API call to get combos\n\n  }, {\n    key: \"getCombo\",\n    value: function getCombo() {\n      var _this2 = this;\n\n      API.findAll().then(function (res) {\n        return _this2.setState({\n          combo: res.data.combo\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n      this.callCombos();\n      this.totalStrikes();\n    } // Combo random timer\n\n  }, {\n    key: \"callCombos\",\n    value: function callCombos() {\n      var rand = Math.round(Math.random() * (6000 - 2500)) + 2500;\n      setTimeout(this.getCombo, rand);\n    }\n  }, {\n    key: \"totalStrikes\",\n    // Add strikes based on combos called\n    value: function totalStrikes() {\n      var arr = this.string_to_array(this.state.combo);\n      var length = arr.length;\n      this.setState({\n        strikes: this.state.strikes + length\n      });\n    } // string to array\n\n  }, {\n    key: \"displayPositiveStrikes\",\n    // Solution to get around intitial 1-index array\n    value: function displayPositiveStrikes() {\n      if (this.state.strikes > 0) {\n        return this.state.strikes;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        class: \"bg-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"jumbotron jumbotron-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        class: \"display-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Work!\"), React.createElement(\"p\", {\n        class: \"lead text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Throw your combos as they're called out!\"))), React.createElement(\"div\", {\n        class: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"round col-sm-4 text-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"bg-success text-light rounded\",\n        onClick: this.startCountDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Start\")))), React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card card1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Current Combo\"), React.createElement(\"p\", {\n        class: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, this.state.combo)))), React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card card2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Total Strikes:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        class: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, this.displayPositiveStrikes())))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"round col-sm-4 text-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, this.display()))), React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"round col-sm-4 text-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.clockMinutes(), \":\", this.state.seconds), React.createElement(Link, {\n        to: \"/Stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"bg-danger text-light rounded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Finish\")))))));\n    }\n  }]);\n\n  return Work;\n}(Component);\n\nexport default Work;","map":{"version":3,"sources":["/Users/patrickneff/Documents/code/Pad-holder-app/client/src/components/Work/work.js"],"names":["React","Component","Link","API","Work","string_to_array","str","trim","split","state","seconds","roundMinutes","breakMinutes","round","work","combo","strikes","startCountDown","bind","breakTick","roundTick","break","display","getCombo","roundNumber","intervalHandle","setInterval","time","secondNumber","callCombos","min","Math","floor","sec","setState","value","clearInterval","toggle","endSession","console","log","window","location","href","findAll","then","res","data","catch","err","totalStrikes","rand","random","setTimeout","arr","length","displayPositiveStrikes","clockMinutes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./work.css\";\nimport API from \"../utils/API\";\n\n\nclass Work extends Component {\n    constructor() {\n        super();\n   this.state = {\n     seconds: '00', \n     roundMinutes: '3',\n     breakMinutes: '1',\n     round: '1',\n     work: true,\n     combo: '',\n     strikes: -1\n   }\n   // method that triggers the countdown functionality\n   this.startCountDown = this.startCountDown.bind(this);\n   this.breakTick = this.breakTick.bind(this);\n   this.roundTick = this.roundTick.bind(this);\n   this.round = this.round.bind(this);\n   this.break = this.break.bind(this);\n   this.display = this.display.bind(this);\n   this.getCombo = this.getCombo.bind(this);\n   }\n\n    // Starts timer\n    startCountDown() {\n        this.round();\n        this.roundNumber = 1;\n    }\n    // Starts Round\n    round() {\n        this.intervalHandle = setInterval(this.roundTick, 1000);\n        let time = this.state.roundMinutes;\n        this.secondNumber = time * 60;\n        this.callCombos();\n    }\n    \n    // Makes minutes and seconds go down\n    roundTick() {\n        var min = Math.floor(this.secondNumber / 60);\n        var sec = this.secondNumber - (min * 60);\n        var round = this.roundNumber;\n        this.setState({\n            roundMinutes: min,\n            seconds: sec,\n            round: round,\n            work: true\n        })\n        if (sec < 10) {\n            this.setState({\n            seconds: \"0\" + this.state.seconds,\n            })\n        }\n        if (min < 10) {\n        this.setState({\n            value: \"0\" + min,\n            })\n        }\n        if (min === 0 & sec === 0) {\n        clearInterval(this.intervalHandle);\n            this.toggle();\n            this.setState({\n                roundMinutes: '3'\n            })\n        }\n            this.secondNumber--;\n    }\n\n    // Break functions\n    break() {\n        this.intervalHandle = setInterval(this.breakTick, 1000);\n        let time = this.state.breakMinutes;\n        this.secondNumber = time * 60;\n        // stop\n    }\n    breakTick() {\n        var min = Math.floor(this.secondNumber / 60);\n        var sec = this.secondNumber - (min * 60);\n        var round = this.roundNumber;\n        this.setState({\n            breakMinutes: min,\n            seconds: sec,\n            round: round,\n            work: false,\n        })\n        if (sec < 10) {\n            this.setState({\n            seconds: \"0\" + this.state.seconds,\n            })\n        }\n        if (min < 10) {\n        this.setState({\n            value: \"0\" + min,\n            })\n        }\n        if (min === 0 & sec === 0) {\n        clearInterval(this.intervalHandle);\n            this.roundNumber++;\n            this.round();\n            this.setState({\n                breakMinutes: '1'\n            })\n        }\n            this.secondNumber--\n    }\n    // Displays Round or Break\n    display() {\n       if (this.state.work === true) {\n           return `Round ${this.state.round} of 5`;\n       } else {\n            return 'Break';\n       }\n    }\n    // Decides Round or break for minutes\n    clockMinutes() {\n        if (this.state.work === true) {\n            return this.state.roundMinutes;\n        } else {\n            return this.state.breakMinutes;\n        }\n    }\n    // End session after last round or go to break in between rounds\n    toggle() {\n        if (this.roundNumber === 5) {\n            this.endSession()\n        }\n        else {\n            this.break();\n        }\n    }\n\n    // End session\n    endSession() {\n        console.log(\"end session\");\n        clearInterval(this.intervalHandle);\n        window.location.href=\"/Stats\";\n    }\n\n    // API call to get combos\n    getCombo() {\n        API.findAll()\n        .then(res => \n            this.setState({ \n                combo: res.data.combo,\n            }))\n        .catch(err => console.log(err));\n        this.callCombos();\n        this.totalStrikes();\n    }\n\n    // Combo random timer\n    callCombos() {\n        var rand = Math.round(Math.random() * (6000 - 2500)) + 2500;\n        setTimeout(this.getCombo, rand);\n    };\n\n    // Add strikes based on combos called\n    totalStrikes() {\n       const arr = this.string_to_array(this.state.combo);\n       const length = arr.length;\n            this.setState({ strikes: this.state.strikes + length });\n    }\n    \n    // string to array\n    string_to_array = function (str) {\n        return str.trim().split(\", \");\n   };\n\n    // Solution to get around intitial 1-index array\n    displayPositiveStrikes() {\n        if (this.state.strikes > 0) {\n            return this.state.strikes;\n        }\n    }\n    render() {\n        return (\n            <div class=\"bg-dark\">\n        <div class=\"jumbotron jumbotron-fluid\">\n            <div class=\"container\">\n                <h1 class=\"display-4\">Work!</h1>\n                <p class=\"lead text-danger\">Throw your combos as they're called out!</p>\n            </div>\n        </div>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div className=\"round col-sm-4 text-light\">\n                    <button className=\"bg-success text-light rounded\" onClick={this.startCountDown}>Start</button>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <div className=\"col-6\">\n                <div className=\"card card1\">\n                    <div className=\"card-body\">\n                        <h5 class=\"card-title\">Current Combo</h5>\n                        <p class=\"card-text\">{this.state.combo}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-6\">\n                <div className=\"card card2\">\n                    <div className=\"card-body\">\n                        <h5 class=\"card-title\">Total Strikes:</h5>\n                        <br/>\n                        <p class=\"card-text\">{this.displayPositiveStrikes()}</p>\n                    </div>\n                </div>\n            </div>\n            <br/>\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div className=\"round col-sm-4 text-light\">\n                        <h3>{this.display()}</h3>\n                    </div>\n                </div>\n                <div class=\"row\">\n                <div className=\"round col-sm-4 text-light\">\n                    <h2>{this.clockMinutes()}:{this.state.seconds}</h2>\n                    <Link to=\"/Stats\"><button className=\"bg-danger text-light rounded\">Finish</button></Link>\n                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n        )\n    }\n}\n\n\n\n\n\nexport default Work;"]},"metadata":{},"sourceType":"module"}